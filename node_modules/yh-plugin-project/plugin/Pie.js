import {register} from 'yh-plugin-manager';
import echarts from "echarts";

const plugin = {
    getProps: () => {
        return [
            // 标题名称
            {
                group: "titleOption",
                type: "string",
                key: "title",
                value: "测试组件"
            },
            // 标题字体
            {
                group: "titleOption",
                type: "font",
                key: "titleFont",
            },
            // 图例是否可见
            {
                group: "legendOption",
                type: "boolean",
                key: "legendOption_visible",
                value: true
            },
            // 图例字体
            {
                group: "legendOption",
                type: "font",
                key: "legendFont"
            },
            // 图例位置
            {
                group: "legendOption",
                type: "combo",
                key: "legendPosition",
                value: "right",
                option: ["left", "top", "right", "bottom"],
            },
        ];
    },
    getLocalView: (key) => {
        const LocalSetting = {
            "PluginName": {
                "zh_CN": "测试组件\n1个维度\n1个度量",
                "en_US": "Pie\n1 dimension\n1 measure",
                "ja_JP": "ファンネルチャート\n1次元\n1指標",
                "zh_TW": "漏斗圖\n1個維度\n1個度量"
            },
            "title": {"zh_CN": "测试组件", "en_US": "Pie", "ja_JP": "ファンネルチャート", "zh_TW": "漏斗圖"},
            "valueFont": {"zh_CN": "", "en_US": "", "ja_JP": "", "zh_TW": ""},
            "legendFont": {"zh_CN": "", "en_US": "", "ja_JP": "", "zh_TW": ""},
            "chartColor": {"zh_CN": "图例颜色", "en_US": "Legend Color", "ja_JP": "凡例の色", "zh_TW": "圖例顏色"},
            "titlePosition": {"zh_CN": "位置", "en_US": "Position", "ja_JP": "位置", "zh_TW": "位置"},
            "titleFont": {"zh_CN": "", "en_US": "", "ja_JP": "", "zh_TW": ""},
            "titleOption": {"zh_CN": "标题选项", "en_US": "Title", "ja_JP": "タイトル", "zh_TW": "標題選項"},
            "left": {"zh_CN": "左", "en_US": "Left", "ja_JP": "左", "zh_TW": "左"},
            "top": {"zh_CN": "上", "en_US": "Top", "ja_JP": "上", "zh_TW": "上"},
            "right": {"zh_CN": "右", "en_US": "Right", "ja_JP": "右", "zh_TW": "右"},
            "bottom": {"zh_CN": "下", "en_US": "Bottom", "ja_JP": "下", "zh_TW": "下"},
            "inside": {"zh_CN": "内部", "en_US": "Inside", "ja_JP": "内部", "zh_TW": "內部"},
            "legendOption": {"zh_CN": "图例选项", "en_US": "Legent", "ja_JP": "凡例", "zh_TW": "圖例選項"},
            "valueOption": {"zh_CN": "数值选项", "en_US": "Value", "ja_JP": "数値", "zh_TW": "數值選項"},
            "legendPosition": {"zh_CN": "位置", "en_US": "Position", "ja_JP": "位置", "zh_TW": "位置"},
            "valuePosition": {"zh_CN": "位置", "en_US": "Position", "ja_JP": "位置", "zh_TW": "位置"},
        };
        return LocalSetting[key];
    },
    // 1个维度 1个度量  感觉没毛病
    getBindInfo: () => {
        return {
            xcolumns: [
                {
                    index: 0,
                    isDim: true    // dim = dimension   维度
                }],
            ycolumns: [
                {
                    index: 0,
                    isDim: false  // y为度量
                }]
        };
    },
    // qinfo 定义绑定列信息。
    // grid 绑定信息
    render: (domName, props, grid = null, qinfo = null) => {
        // 准备一个dom节点作为echarts实例的渲染容器
        if(document.getElementById(domName) == null) {
            return;
        }
        let pie = echarts.init(document.getElementById(domName));
        // pie.resize();

        // 如果没有数据
        if (grid == null || grid.csize() < 2) {
            pie.dispose();
            pie = null;
            return;
        }
        pie.resize({
            width: "auto",
            height: "auto"
        });

        let option = {
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b}: {c} ({d}%)'
            },
            legend: {
                orient: 'vertical',
                left: 10,
            },
            // cursor: "default",
            // calculable: true,
            series: []
        };
        let pie0 = {
            type: 'pie',
            radius: ['50%', '70%'],
            avoidLabelOverlap: false,
            label: {
                show: false,
                position: 'center'
            },
            emphasis: {
                label: {
                    show: true,
                    fontSize: '30',
                    fontWeight: 'bold'
                }
            },
            labelLine: {
                show: false
            },
        };
        //设置属性 颜色字体
        // if (props.chartColor) {
        //     option.color = props.chartColor;
        // }
        // if (props.legendFont) {
        //     let legendFont = props.legendFont;
        //
        //     option.legend.textStyle = {
        //         color: legendFont.fontColor,
        //         fontFamily: legendFont.fontFamily,
        //         fontStyle: legendFont.fontStyle,
        //         fontWeight: legendFont.fontWeight,
        //         fontSize: legendFont.fontSize
        //     };
        // }
        // 图例位置
        switch (props.legendPosition) {
            case "left":
                option.legend.y = 'center';
                option.legend.orient = 'vertical';
                break;
            case "top":
                option.legend.left = "center";
                option.legend.orient = 'horizontal';
                break;
            case "right":
                option.legend.left = "auto";
                option.legend.y = 'center';
                option.legend.orient = 'vertical';
                break;
            case "bottom":
                option.legend.left = "center";
                option.legend.orient = 'horizontal';
                break;
        }
        // 图例是否可见
        if (props.legendOption_visible != undefined) {
            option.legend.show = props.legendOption_visible;
        }

        // graph bounds
        let data = [];
        // rsize 行
        // csize 列
        // grid 数据，应该是二维的
        for (let i = 1; i < grid.rsize(); i++) {
            if (grid.get(i, 0) != null && grid.get(i, 1) !== 0) {
                data.push(
                    {
                        value: Number(grid.get(i, 1)),  // value = 第二列数据
                        name: grid.get(i, 0),          //  name = 第一列数据
                    }
                );
            }
        }

        pie0.data = data;
        option.series.push(pie0);
        pie.setOption(option, true);
    },

    // dispose
    clearAll: (domId) => {
        let instance = echarts.getInstanceByDom(document.getElementById(domId));
        instance.dispose();
        instance = null;
    }
};

register(plugin);


