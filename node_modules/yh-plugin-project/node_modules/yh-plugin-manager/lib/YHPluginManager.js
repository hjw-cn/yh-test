'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright 2011 Yonghong Technology Corp, Inc. All rights reserved.
 * Yonghong Technology Corp PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

/**
 * The YHPluginManager is used to manage user-customized plugins.
 * @author Yonghong Technology Corp, Inc.
 */
var YHPluginManager = function () {
   function YHPluginManager() {
      _classCallCheck(this, YHPluginManager);
   }

   _createClass(YHPluginManager, null, [{
      key: 'isValid',

      /**
       * @api {GET} plugin isValid
       * @apiDescription Check the plugin is valid or not.
       * @apiGroup YHPluginManager
       * @apiName isValid
       * @apiParam  {Object} plugin   Verified plugin
       * @apiPermission anyone
       * @apiSuccess {String} result   success.
       * @apiError   {Array}  warning  The reason for the illegal plug-in.
       *
       * @apiErrorExample Error-Response:
       *    ["No render method is defined."]
       */
      value: function isValid(plugin) {
         var valid = true,
             warning = [];

         if (plugin == null) {
            valid = false;
            warning.push('The plugin is undefined.');
         } else {
            if (typeof plugin.render !== 'function') {
               valid = false;
               warning.push('This plugin does not define the function render.');
            }

            if (typeof plugin.getBindInfo !== 'function') {
               valid = false;
               warning.push('This plugin does not define the function getBindInfo.');
            }

            if (typeof plugin.getProps !== 'function') {
               valid = false;
               warning.push('This plugin does not define the function: getProps.');
            }

            if (typeof plugin.getLocalView !== 'function') {
               valid = false;
               warning.push('This plugin does not define the function: getLocalView.');
            } else {
               var pluginName = plugin.getLocalView("PluginName");

               if (pluginName == undefined || pluginName == null) {
                  valid = false;
                  warning.push('This plugin does not define the PluginName function getLocalView.');
               }
            }
         }

         return new Promise(function (resolve, reject) {
            if (valid) {
               resolve(plugin);
            } else {
               reject(warning);
            }
         });
      }

      /**
       * @api {GET} plugin register
       * @apiDescription Register plugin in the module.
       * @apiGroup YHPluginManager
       * @apiName register
       * @apiParam  {String} key      Registration key
       * @apiParam  {Object} plugin   Registration plugin
       * @apiSuccess {String} result success.
       * @apiError   {String} result Error message when registering.
       */

   }, {
      key: 'register',
      value: function register(plugin) {
         YHPluginManager.isValid(plugin).then(function (plugin) {
            var modules = window.__YHModules;
            modules["??{__YH_PLUGIN_ID__}"] = plugin;
         }).catch(function (warning) {
            console.warn(warning);
         });
      }

      /**
       * @api {GET} plugin getRegistered
       * @apiDescription Get the register plugin in the module.
       * @apiGroup YHPluginManager
       * @apiName getRegistered
       * @apiParam   {String} key    Registration key
       * @apiSuccess {Object} plugin Plugin from module.
       * @apiError   {String} result Get registered plugin is null.
       */

   }, {
      key: 'getRegistered',
      value: function getRegistered(key) {
         return new Promise(function (resolve, reject) {
            if (key == null || !window.__YHModules[key]) {
               reject("Get registered plugin is null.");
            } else {
               resolve(window.__YHModules[key]);
            }
         });
      }

      /**
       * Get plugin by synchronization
       */

   }, {
      key: 'getSyncRegistered',
      value: function getSyncRegistered(key) {
         return window.__YHModules[key];
      }
   }]);

   return YHPluginManager;
}();

exports.default = YHPluginManager;


window.__YHModules = window.__YHModules ? window.__YHModules : {};