/*
 * Copyright 2011 Yonghong Technology Corp, Inc. All rights reserved.
 * Yonghong Technology Corp PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

/**
 * The YHPluginManager is used to manage user-customized plugins.
 * @author Yonghong Technology Corp, Inc.
 */
export default class YHPluginManager {
   /**
    * @api {GET} plugin isValid
    * @apiDescription Check the plugin is valid or not.
    * @apiGroup YHPluginManager
    * @apiName isValid
    * @apiParam  {Object} plugin   Verified plugin
    * @apiPermission anyone
    * @apiSuccess {String} result   success.
    * @apiError   {Array}  warning  The reason for the illegal plug-in.
    *
    * @apiErrorExample Error-Response:
    *    ["No render method is defined."]
    */
   static isValid(plugin) {
      let valid = true,
          warning = [];

      if(plugin == null) {
         valid = false;
         warning.push('The plugin is undefined.');
      }
      else {
         if(typeof plugin.render !== 'function') {
            valid = false;
            warning.push('This plugin does not define the function render.');
         }

         if(typeof plugin.getBindInfo !== 'function') {
            valid = false;
            warning.push('This plugin does not define the function getBindInfo.');
         }

         if(typeof plugin.getProps !== 'function') {
            valid = false;
            warning.push('This plugin does not define the function: getProps.');
         }

         if(typeof plugin.getLocalView !== 'function') {
            valid = false;
            warning.push('This plugin does not define the function: getLocalView.');
         }
         else {
            let pluginName = plugin.getLocalView("PluginName");

            if(pluginName == undefined || pluginName == null) {
               valid = false;
               warning.push('This plugin does not define the PluginName function getLocalView.');
            }
         }
      }

      return new Promise((resolve, reject) => {
         if(valid) {
            resolve(plugin);
         }
         else {
            reject(warning);
         }
      });
   }

   /**
    * @api {GET} plugin register
    * @apiDescription Register plugin in the module.
    * @apiGroup YHPluginManager
    * @apiName register
    * @apiParam  {String} key      Registration key
    * @apiParam  {Object} plugin   Registration plugin
    * @apiSuccess {String} result success.
    * @apiError   {String} result Error message when registering.
    */
   static register(plugin) {
      YHPluginManager.isValid(plugin).then((plugin) => {
         const modules = window.__YHModules;
         modules["??{__YH_PLUGIN_ID__}"] = plugin;
      }).catch(warning => {
         console.warn(warning);
      })
   }

   /**
    * @api {GET} plugin getRegistered
    * @apiDescription Get the register plugin in the module.
    * @apiGroup YHPluginManager
    * @apiName getRegistered
    * @apiParam   {String} key    Registration key
    * @apiSuccess {Object} plugin Plugin from module.
    * @apiError   {String} result Get registered plugin is null.
    */
   static getRegistered(key) {
      return new Promise((resolve, reject) => {
         if(key == null || !window.__YHModules[key]) {
            reject("Get registered plugin is null.");
         }
         else {
            resolve(window.__YHModules[key]);
         }
      });
   }

   /**
    * Get plugin by synchronization
    */
   static getSyncRegistered(key) {
      return window.__YHModules[key];
   }
}

window.__YHModules = window.__YHModules ? window.__YHModules : {};