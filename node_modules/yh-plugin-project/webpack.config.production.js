var webpack = require('webpack');
var HappyPack = require('happypack');
const terser = require('terser-webpack-plugin');
var ZipPlugin = require('zip-webpack-plugin');

let exportsMap = ["Funnel.js","Pie.js"];

module.exports = exportsMap.map((name) => ({
   devtool: 'cheap-module-inline-source-map',
   entry: {
      [name]: './plugin/' + name
   },
   output: {
      path:  __dirname + "/plugin/result",
      filename: name,
   },
   optimization: {
      splitChunks: false,
      minimizer: [
         new terser()
      ]
   },
   plugins: [
      new HappyPack({
         id: 'jsx',
         threads: 2,
         loaders: [
            {
               loader: "babel-loader",
               exclude: /node_modules/,
               options: {
                  presets: ['react', 'es2015', 'stage-0'],
                  cacheDirectory: true,
               }
            },
            {
               loader: "eslint-loader",
               enforce: 'pre',
               exclude: /node_modules/,
               options: {
                  configFile: './.eslintrc.js'
               }
            }
         ],
      }),
      new HappyPack({
         id: 'scss',
         threads: 2,
         loaders: ["style-loader", "css-loader", "postcss-loader", "sass-loader"],
      }),
      new HappyPack({
         id: 'css',
         threads: 2,
         loaders: ["style-loader", "css-loader"],
      }),
      new webpack.LoaderOptionsPlugin({
         debug: false,
         minimize: true
      }),
      new webpack.DefinePlugin({
         "process.env.NODE_ENV": JSON.stringify('production'),
         __DEV__: JSON.stringify(false),
         REDUX_DEBUG: JSON.stringify(false),
         MOBILE_VIEWER: false
      }),
      new webpack.optimize.AggressiveMergingPlugin(),
      new ZipPlugin({
         path: __dirname + "/plugin/jar",
         filename: `${name}`,
         extension: `jar`,
         pathPrefix: `src`
      })
   ],
   resolve: {
      mainFields: ['jsnext:main', 'main'],
      alias: {
         moment: 'moment/moment.js'
      },
      extensions: ['.js', '.jsx'],
      symlinks: false
   },
   module: {
      rules: [
         {
            test: /\.jsx?$/,
            exclude: /node_modules/,
            use: ['happypack/loader?id=jsx'],
         },
         {
            test: /\.css$/, // Only .css files
            use: ['happypack/loader?id=css'] // Run both loaders
         },
         {
            test: /\.scss$/,
            use: ['happypack/loader?id=scss']
         },
         {
            test: /\.(ttf|eot|svg|woff(2)?)(\?[a-z0-9]+)?$/,
            use: [{
               loader: 'url-loader',
               options: {
                  limit: 100000
               }
            }]
         }
      ],
   },
}));